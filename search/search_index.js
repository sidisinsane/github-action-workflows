var __index = {"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"GitHub Action Workflows","text":"<p>This project provides demonstrations and examples of GitHub Action workflows to help you understand and implement CI/CD automation in your repositories.</p>"},{"location":"index.html#installation","title":"Installation","text":"<pre><code>uv sync\n</code></pre>"},{"location":"index.html#usage","title":"Usage","text":"<p>After installation, you can run the tool using:</p> <pre><code>github-action-workflows\n</code></pre>"},{"location":"index.html#development","title":"Development","text":""},{"location":"index.html#optional-dependencies","title":"Optional Dependencies","text":"<p>For building releases:</p> <pre><code>uv sync --extra build\n</code></pre> <p>For documentation:</p> <pre><code>uv sync --extra docs\n</code></pre>"},{"location":"index.html#links","title":"Links","text":"<ul> <li>Homepage:   https://github.com/sidisinsane/github-action-workflowss</li> <li>Repository:   https://github.com/sidisinsane/github-action-workflows</li> <li>Documentation:   README</li> <li>Issues:   Bug Tracker</li> </ul>"},{"location":"license.html","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2025 Dirk Sidney Jansen</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"guides/git-guide.html","title":"Git Conventions and Commands Reference","text":"<p>This guide establishes standardized naming conventions for Git operations based on the Conventional Commits specification and provides a comprehensive command reference for common Git workflows.</p>"},{"location":"guides/git-guide.html#git-conventions","title":"Git Conventions","text":"<p>Use standard naming conventions for Git operations based on the Conventional Commits specification.</p>"},{"location":"guides/git-guide.html#commit-messages","title":"Commit Messages","text":"<p>Commit messages should provide a concise summary of what changes were made and why, using imperative form and lowercase formatting.</p>"},{"location":"guides/git-guide.html#rules","title":"Rules","text":"<p>Format:</p> <pre><code>&lt;tag&gt;[(&lt;scope&gt;)][!]: &lt;description&gt;\n# e.g., feat: add ignore parser\n</code></pre> <ul> <li> <p>formatting: lower case</p> </li> <li> <p>form: imperative</p> </li> </ul> <p>Allowed Tags:</p> tag purpose version bump feat For adding or updating features minor fix For bug fixes patch perf For performance improvements patch build For changes to build system or dependencies none chore For non-code tasks none ci For adding or updating CI/CD configuration none docs For adding or updating documentation none refactor For code improvements none style For code formatting none test For adding or updating tests none <pre><code># pyproject.toml\n[tool.semantic_release.commit_parser_options]\nminor_tags = [\"feat\"]\npatch_tags = [\"fix\", \"perf\"]\nother_allowed_tags = [\n  \"build\",\n  \"chore\",\n  \"ci\",\n  \"docs\",\n  \"refactor\",\n  \"style\",\n  \"test\",\n]\nallowed_tags = [\n  \"feat\",\n  \"fix\",\n  \"perf\",\n  \"build\",\n  \"chore\",\n  \"ci\",\n  \"docs\",\n  \"refactor\",\n  \"style\",\n  \"test\",\n]\n</code></pre>"},{"location":"guides/git-guide.html#examples","title":"Examples","text":"<ul> <li> <p><code>feat: add user authentication</code></p> </li> <li> <p><code>feat!: remove deprecated api endpoints</code></p> </li> <li> <p><code>feat(auth): implement oauth integration</code></p> </li> <li> <p><code>feat(parser)!: change config file format</code></p> </li> <li> <p><code>fix: resolve memory leak in cache</code></p> </li> <li> <p><code>fix!: correct breaking validation logic</code></p> </li> <li> <p><code>fix(api): handle null response errors</code></p> </li> <li> <p><code>fix(ui)!: update button component interface</code></p> </li> <li> <p><code>perf: optimize database queries</code></p> </li> <li> <p><code>perf!: restructure data processing pipeline</code></p> </li> <li> <p><code>perf(cache): improve memory usage</code></p> </li> <li> <p><code>perf(api)!: change response format for speed</code></p> </li> <li> <p><code>build: update webpack configuration</code></p> </li> <li> <p><code>build(deps): upgrade react to v18</code></p> </li> <li> <p><code>chore: clean up unused imports</code></p> </li> <li> <p><code>chore(config): update eslint rules</code></p> </li> <li> <p><code>ci: add automated testing workflow</code></p> </li> <li> <p><code>ci(deploy): configure production pipeline</code></p> </li> <li> <p><code>docs: update installation guide</code></p> </li> <li> <p><code>docs(api): add endpoint examples</code></p> </li> <li> <p><code>refactor: simplify user validation logic</code></p> </li> <li> <p><code>refactor(auth): extract common utilities</code></p> </li> <li> <p><code>style: format code with prettier</code></p> </li> <li> <p><code>style(components): fix indentation</code></p> </li> <li> <p><code>test: add unit tests for parser</code></p> </li> <li> <p><code>test(integration): cover auth flow</code></p> </li> </ul>"},{"location":"guides/git-guide.html#branches","title":"Branches","text":"<p>Branch names should follow a consistent format to clearly indicate the type of work and briefly describe the changes, using kebab-case formatting.</p>"},{"location":"guides/git-guide.html#rules_1","title":"Rules","text":"<p>Format:</p> <pre><code>&lt;tag&gt;/&lt;description&gt;\n# e.g., feat/add-ignore-parser\n</code></pre> <p>for preparing releases</p> <pre><code>release/&lt;MAJOR.MINOR.PATCH&gt;\n# e.g., release/1.2.3\n</code></pre> <ul> <li> <p>formatting: kebap-case</p> </li> <li> <p>form: imperative</p> </li> </ul> <p>Allowed Tags:</p> <ul> <li> <p>see Commit Messages</p> </li> <li> <p>release</p> </li> </ul>"},{"location":"guides/git-guide.html#examples_1","title":"Examples","text":"<ul> <li> <p><code>feat/add-user-authentication</code></p> </li> <li> <p><code>feat/auth-implement-oauth-integration</code></p> </li> <li> <p><code>fix/resolve-memory-leak-cache</code></p> </li> <li> <p><code>fix/api-handle-null-responses</code></p> </li> <li> <p><code>perf/optimize-database-queries</code></p> </li> <li> <p><code>perf/cache-improve-memory-usage</code></p> </li> <li> <p><code>release/2.1.0</code></p> </li> <li> <p><code>build/update-webpack-config</code></p> </li> <li> <p><code>build/deps-upgrade-react</code></p> </li> <li> <p><code>chore/clean-unused-imports</code></p> </li> <li> <p><code>chore/config-update-eslint</code></p> </li> <li> <p><code>ci/add-automated-testing</code></p> </li> <li> <p><code>ci/deploy-configure-production</code></p> </li> <li> <p><code>docs/update-installation-guide</code></p> </li> <li> <p><code>docs/api-add-endpoint-examples</code></p> </li> <li> <p><code>refactor/simplify-validation-logic</code></p> </li> <li> <p><code>refactor/auth-extract-utilities</code></p> </li> <li> <p><code>style/format-with-prettier</code></p> </li> <li> <p><code>style/components-fix-indentation</code></p> </li> <li> <p><code>test/add-parser-unit-tests</code></p> </li> <li> <p><code>test/integration-cover-auth-flow</code></p> </li> </ul>"},{"location":"guides/git-guide.html#commands-reference","title":"Commands Reference","text":""},{"location":"guides/git-guide.html#branching","title":"Branching","text":"task <code>git checkout</code> cmd <code>git switch</code> / <code>git restore</code> cmd Switch to an existing branch <code>git checkout main</code> <code>git switch main</code> Create a new branch and switch to it <code>git checkout -b feat/add-ignore-parser</code> <code>git switch -c feat/add-ignore-parser</code> Switch to previous branch <code>git checkout -</code> <code>git switch -</code> Discard local changes to a file <code>git checkout -- README.md</code> <code>git restore README.md</code> Restore a file from a specific commit <code>git checkout abc123 -- README.md</code> <code>git restore --source=abc123 README.md</code> Restore all files to last commit state <code>git checkout -- .</code> <code>git restore .</code> Create a new branch from a commit <code>git checkout -b fix abc123</code> <code>git switch -c fix abc123</code> Detach HEAD at a specific commit (no branch) <code>git checkout abc123</code> <code>git switch --detach abc123</code> Cancel staged changes (unstage a file) <code>git reset HEAD README.md</code> <code>git restore --staged README.md</code>"},{"location":"guides/git-guide.html#committing","title":"Committing","text":"task command Stage all changes <code>git add .</code> Stage specific file <code>git add README.md</code> Stage all modified files (not new) <code>git add -u</code> Interactive staging <code>git add -i</code> or <code>git add -p</code> Commit staged changes <code>git commit -m \"feat: add user auth\"</code> Commit and stage all modified files <code>git commit -am \"fix: resolve cache bug\"</code> Amend last commit message <code>git commit --amend -m \"new message\"</code> Amend last commit with new changes <code>git commit --amend --no-edit</code> Create empty commit <code>git commit --allow-empty -m \"trigger ci\"</code> View commit history <code>git log</code> or <code>git log --oneline</code> View specific number of commits <code>git log -5</code> View changes in last commit <code>git show</code> or <code>git show HEAD</code> View changes in specific commit <code>git show abc123</code> Unstage file (keep changes) <code>git reset HEAD README.md</code> Unstage all files (keep changes) <code>git reset HEAD</code> Undo last commit (keep changes staged) <code>git reset --soft HEAD~1</code> Undo last commit (keep changes unstaged) <code>git reset HEAD~1</code> Undo last commit (discard changes) <code>git reset --hard HEAD~1</code> Interactive rebase last 3 commits <code>git rebase -i HEAD~3</code>"},{"location":"guides/git-guide.html#merging","title":"Merging","text":"task command Merge branch with fast-forward <code>git merge feat/add-auth</code> Merge branch without fast-forward <code>git merge --no-ff feat/add-auth</code> Squash merge branch <code>git merge --squash feat/add-auth</code> Abort merge during conflicts <code>git merge --abort</code> Continue merge after resolving conflicts <code>git merge --continue</code> View merge conflicts <code>git status</code> or <code>git diff</code> Mark conflict as resolved <code>git add conflicted_file.py</code> Rebase current branch onto main <code>git rebase main</code> Interactive rebase <code>git rebase -i main</code> Abort rebase <code>git rebase --abort</code> Continue rebase after resolving conflicts <code>git rebase --continue</code> Skip current commit during rebase <code>git rebase --skip</code> Cherry-pick specific commit <code>git cherry-pick abc123</code> Cherry-pick commit without committing <code>git cherry-pick --no-commit abc123</code> View branches that have been merged <code>git branch --merged</code> View branches not yet merged <code>git branch --no-merged</code> Delete merged branch <code>git branch -d feat/add-auth</code> Force delete unmerged branch <code>git branch -D feat/add-auth</code>"}]}